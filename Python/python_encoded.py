binary_string


def bin2Text(string):
    text = ''
    for word in string.split():
        text += chr(int(word, 2))
    
    return text


def hex2Text(string):
    text = ''
    for word in string.split():
        text += chr(int(word, 16))
    
    return text


def octal2Text(string):
    text = ''
    for word in string.split():
        text += chr(int(word, 8))

    return text


def cipher(string, key):
    text = ''
    for char in string:
        if char.isalpha():
            if  char.isupper():
                text += chr((ord(char) + key - 65) % 26 + 65)
            else:
                text += chr((ord(char) + key - 97) % 26 + 97)
        else:
            text += char
    
    return text


result = hex2Text(octal2Text(bin2Text(binary_string)))

for key in range(26, 0, -1):
    print(cipher(result, key))

